---
description: 
globs: 
alwaysApply: true
---
これはあくまでたたき台であり、あなたの専門的な知見からの改善案を歓迎します。特に、**個人開発で予算が限られている点を最重要視**し、**スモールスタート可能で段階的に拡張できる現実的な提案**を期待しています。技術選定や機能実装についても、既存の案に固執せず、より良い選択肢があれば積極的に提案してください。

# Parmile アプリケーション概要

Parmile (パーミル) は、TinderライクなスワイプUIを通じてファッションアイテムを発見し、お気に入り登録できるWebアプリケーションです。ユーザーは直感的な操作で商品を「ライク」または「ノット」し、気に入ったアイテムを後で見返すことができます。

1.  **目的**

      * ユーザーが新しいファッションアイテムと出会う体験を楽しく、効率的にする。
      * スワイプという直感的なUIで、気軽に商品を吟味できるようにする。
      * フィルタリング機能により、ユーザーの好みに合ったアイテムを見つけやすくする。

2.  **コアコンセプトと開発方針の再確認**

      * **基本コンセプト**: Tinderのようなスワイプ操作（右でライク、左でノット）でファッションアイテムを直感的に発見・吟味し、気に入ったものを後で見返せるようにするという点は、引き続き中心的なコンセプトです。
      * **ターゲットユーザー**: 新しいファッションアイテムとの出会いを求める一般ユーザーを対象とします。
      * **柔軟な技術選定**: 後述する技術スタック案はあくまで現時点での候補であり、よりシンプルかつ効率的に開発できる、あるいは運用コストを抑えられる代替案があれば、積極的に検討・提案してください。
      * **スモールスタートの徹底**: MVP（Minimum Viable Product）を定義し、そこから段階的に機能を拡張していくアプローチを最優先とします。

3.  **データ戦略に関する相談**

      * **初期データセット**: `src/data/sample-products.ts` のような静的ファイルに限定せず、MVP段階で現実的に運用可能な初期商品データセットの構築方法（例えば、小規模な手動登録、特定のECサイトからの限定的な情報取得など）について、具体的なアイデアと手順を提案してください。
      * **将来的なデータ収集・更新**:
          * アフィリエイトプログラム参加ブランドの商品情報を優先的に扱いつつも、**アフィリエイトがないブランドのアイテムも表示できる**ようにしたいと考えています。
          * この方針を踏まえ、商品情報を自動更新する仕組み（API連携、スクレイピング等）について、スモールスタートに適したアーキテクチャ案（例えば、最初は手動更新や半自動化から始め、徐々に自動化の範囲を広げるなど）、Next.jsアプリケーションとの連携方法、およびその実現可能性と注意点を提案してください。24時間ごとの自動更新はあくまで理想であり、より現実的な更新頻度や方法についても検討したいです。

4.  **技術スタックに関する相談**

      * **フロントエンド**:
          * 現状の候補: Next.js (App Router), TypeScript, React, Tailwind CSS
          * 要望: 上記構成に固執しません。個人開発で迅速にMVPを構築し、その後のメンテナンスもしやすい、より良い技術スタックがあれば提案してください。選定理由やメリット・デメリットも合わせて教えてください。
      * **状態管理**:
          * 現状の課題: React Context API と LocalStorage の組み合わせでは、将来的な商品数増加やインタラクションの複雑化によるパフォーマンス（広範囲な再レンダリング等）や管理の煩雑化を懸念しています。
          * 要望: 無料で利用可能、かつ本プロジェクトに適した状態管理ライブラリ（例: Zustand, Jotai に限りません）の選定と比較検討、導入する場合のメリット・デメリット、現行システム（仮にContext APIで一部試作した場合）からの具体的な移行戦略についてアドバイスをください。
      * **バックエンド (ユーザーデータ管理など)**:
          * 必要性の検討: お気に入り情報や閲覧履歴など、ユーザーに紐づくデータをサーバーサイドで永続化する必要性は感じていますが、必須とまでは考えていません。まずはバックエンドレス（例：LocalStorageやブラウザの機能活用）で実現できる範囲と限界、その場合のメリット・デメリットを教えてください。
          * 導入する場合の技術選定: バックエンドを導入する場合、個人開発のため予算を抑えたいので、Supabaseの無料枠活用は魅力的な選択肢の一つですが、これに限りません。他のBaaS（Firebase等）や、小規模なサーバーレス構成など、より良い選択肢があれば提案してください。
          * 実装と連携: 選定したバックエンド技術を用いた認証（ソーシャルログイン含むと尚良い）、データ保存・管理の具体的な実装方法や、フロントエンドとの連携についてアドバイスをお願いします。

5.  **主な機能に関する相談**

      * **商品スワイプ**:
          * 右スワイプ: 「ライク」としてマークし、お気に入りリストに追加。
          * 左スワイプ: 「ノット」としてマーク。
      * **フィルタリング**:
          * 初期必須フィルタ: **ブランド**によるフィルタリングを初期バージョンから実装したいです。
          * 拡張要望: 将来的には、価格帯、カテゴリ、カラー、サイズ、素材などのフィルタ軸を追加したいです。これらのフィルタ条件を組み合わせる際（AND条件/OR条件、あるいはそれらの組み合わせが良いか）、最適なUI/UX（shadcn/ui等のコンポーネント活用例もあれば嬉しいです）、状態管理、実装方法について提案をください。
      * **商品詳細表示**:
          * 商品のメイン画像、追加画像（カルーセル表示）、名称、ブランド、価格、説明などをモーダルで表示。
      * **Undo機能**:
          * 直前のスワイプ操作（ライク/ノット）を取り消し、一つ前の商品に戻る。
      * **お気に入り・閲覧履歴**:
          * ユーザーからのアイデア: 「お気に入りは履歴の中に含まれるので（UI上）まとめても良いのでは」という意見があります。この統合案について、UI/UXの観点からのメリット・デメリット、および技術的な実現方法を検討してください。
          * もしくは、従来通り「お気に入り一覧 (/likes)」と「閲覧履歴 (/history)」を分ける場合、それぞれの機能（削除、フィルタリング、商品詳細表示、購入サイトへの導線など）について、MVPに含めるべき範囲を提案してください。
      * **永続化**:
          * スワイプ履歴、現在表示中の商品インデックス、お気に入り情報などは、初期はLocalStorageでの永続化も検討しつつ、バックエンドを導入する際にはサーバーでの永続化を目指します。より良い永続化戦略があれば提案してください。
      * **ナビゲーション**:
          * 上記のお気に入り・履歴の扱い方を踏まえ、ボトムナビゲーション（または他の適切なナビゲーション形式）で、「ホーム（スワイプ画面）」、「お気に入り/履歴」、「マイページ（仮）」などへ簡単にアクセスできるようなUI案を提案してください。
      * **マイページ (/profile)**:
          * 現状未実装で、MVPに必須ではないと考えています。もしバックエンドを導入する場合、将来的にユーザーアカウント情報表示や各種設定を行う画面として構想していますが、MVP段階での最低限の表示や機能について、あるいは完全に次回以降のフェーズとするか、意見をください。

6.  **ディレクトリ構造 (主要部分 - 現状案)**
    （元のプロンプトのディレクトリ構造を提示しつつ、技術選定や機能変更によって柔軟に変わる可能性があることを示唆）

    ```
    parmile/
    ├── public/
    │   └── images/
    ├── src/
    │   ├── app/
    │   │   ├── explore/page.tsx
    │   │   ├── likes/page.tsx (または history-likes/page.tsx など統合案により変更)
    │   │   ├── history/page.tsx (または統合案により変更)
    │   │   ├── profile/page.tsx (プレースホルダーまたはMVPでは含めない可能性)
    │   │   ├── auth/
    │   │   ├── layout.tsx
    │   │   └── page.tsx
    │   ├── components/
    │   │   ├── ui/
    │   │   ├── swipe-card.tsx
    │   │   ├── product-filter.tsx
    │   │   ├── product-detail-modal.tsx
    │   │   └── bottom-nav.tsx
    │   ├── data/ (初期データ戦略により変更の可能性あり)
    │   │   └── sample-products.ts
    │   ├── lib/ (状態管理やバックエンド連携の方法により構成変更)
    │   │   ├── product-context.tsx (見直し対象)
    │   │   ├── supabaseClient.ts (バックエンド選定により変更)
    │   │   └── utils.ts
    ├── next.config.js
    ├── package.json
    └── tsconfig.json
    ```

      * 状態管理ライブラリの導入やバックエンド連携により、`lib` や `app/api` (データ更新用APIルートなど) の構成が変わる可能性があります。その点も踏まえた提案を期待します。

7.  **最優先で相談したいこと：MVP (Minimum Viable Product) の選定と開発ロードマップ**

      * 上記の機能や技術的な検討事項を踏まえ、**個人開発で限られたリソースの中で最初にリリースすべきMVPのスコープ定義**を最優先で提案してください。どの機能をMVPに含め、どの機能を後回しにするかの判断基準も教えていただけると助かります。
      * MVP開発後、どのような順序で機能拡張していくのが合理的か、段階的な開発ロードマップ案を提案してください。

8.  **MVP定義とロードマップを踏まえて検討したいその他の重要な事項**
    以下の点について、MVPにどの程度関わるか、どのタイミングで本格的に取り組むべきか、といった観点を含め、具体的なアドバイスをお願いします。

      * **パフォーマンス最適化**: 大量の商品画像（将来的にアフィリエイト等から取得）を扱うことを想定した具体的なパフォーマンス向上策（next/image の高度な活用、画像のプロキシ/最適化/圧縮、リスト仮想化技術の導入検討など）。初期ロード時間短縮、スワイプ時の軽快な動作、フィルタリング処理の高速化のためのテクニック。
      * **エラーハンドリング**: API通信エラー（バックエンド連携、商品情報取得時など）、データ処理エラーなど、様々なケースを想定したユーザーフレンドリーなエラー表示方法やフォールバック処理の推奨パターン。具体的な実装例（shadcn/uiのアラートコンポーネント等の活用）。
      * **アクセシビリティ (a11y)**: 最優先事項ではないものの、基本的なアクセシビリティを確保するために、開発初期から意識すべきポイントや、shadcn/uiを活用して容易に対応できる点。具体的なチェック項目やツールがあれば教えてください。
      * **テスト戦略**: テストの知識がほとんどない個人開発者でも始めやすい、現実的なテスト戦略（ユニットテスト、結合テスト、E2Eテストの導入範囲や優先順位）。推奨されるテストライブラリやツール（Next.js環境と相性が良いもの）。特にテストすべき重要な機能（スワイプ、フィルタリング、状態管理、バックエンド連携など）と、そのテストの簡単な記述例。

上記以外にも、このアプリケーションをより良くするためのアイデアがあれば、ぜひ提案してください。